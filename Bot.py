# Bot.py

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import Bot, Dispatcher, types, executor
from aiogram.utils.markdown import hlink
from BotToken import bot_token
import importlib
import curs, curs_usd
import sqlite3
from datetime import datetime

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token = bot_token)
db = Dispatcher(bot)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)

# –ü–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è –∫–Ω–æ–ø–æ–∫(–ö–æ—à–µ–ª—ë–∫, Paramining, –û—Ñ–∏—Ü. —Å–∞–π—Ç)
kb_wallet = types.KeyboardButton("–ö–æ—à–µ–ª—ë–∫")
kb_paramining = types.KeyboardButton("Paramining")
kb_official = types.KeyboardButton("–û—Ñ–∏—Ü. —Å–∞–π—Ç")

# –í—Ç–æ—Ä–∞—è –ª–∏–Ω–∏—è –∫–Ω–æ–ø–æ–∫(Telegram –∫–∞–Ω–∞–ª, Paratax, –ë–ª–æ–∫—á–µ–π–Ω)
kb_telegram = types.KeyboardButton("Telegram –∫–∞–Ω–∞–ª")
kb_paratax = types.KeyboardButton("Paratax")
kb_blockchain = types.KeyboardButton("–ë–ª–æ–∫—á–µ–π–Ω")

# –¢—Ä–µ—Ç—å—è –ª–∏–Ω–∏—è –∫–Ω–æ–ø–æ–∫(GitHub, –°—Ç—Ä—É–∫—Ç—É—Ä–∞, BitTeam)
kb_github = types.KeyboardButton("GitHub")
kb_structure = types.KeyboardButton("–°—Ç—Ä—É–∫—Ç—É—Ä–∞")
kb_bitteam = types.KeyboardButton("BitTeam")

# –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ª–∏–Ω–∏—è –∫–Ω–æ–ø–æ–∫(–ö—É—Ä—Å)
kb_curs = types.KeyboardButton("–ö—É—Ä—Å")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard.add(kb_wallet).insert(kb_paramining).insert(kb_official).add(
			kb_telegram).insert(kb_paratax).insert(kb_blockchain).add(
			kb_github).insert(kb_structure).insert(kb_bitteam).add(
			kb_curs)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@db.message_handler(commands = ["start"])
async def welcome(message: types.Message):
	await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –≤–∞—Å, {message.from_user.first_name}!\n–Ø –º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º 10 —Å—Å—ã–ª–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π PRIZM.\n–î–∞–π—Ç–µ –º–Ω–µ –æ–¥–Ω—É –∏–∑ –¥–µ—Å—è—Ç–∏ –∫–æ–º–º–∞–Ω–¥üëá", 
						reply_markup = keyboard)

	try:
		connect = sqlite3.connect("OSP users.db")
		db = connect.cursor()
		db.execute(f'INSERT INTO –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ VALUES("{message.from_user.id}", "@{message.from_user.username}")')
		connect.commit()
		connect.close()
		print(f"@{message.from_user.username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
	
	except sqlite3.IntegrityError:
		pass


# –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞
@db.message_handler()
async def send_message(message: types.Message):
	if message.text == "–ö–æ—à–µ–ª—ë–∫":
		wallet = hlink("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª—ë–∫", "https://wallet.prizm.space/index.html")
		await message.answer(f"{wallet} PRIZM", 
							parse_mode = "HTML")

	elif message.text == "Paramining":
		paramining = hlink("Paramining", "https://tool-prizm.space/")
		await message.answer(f"–£–∑–Ω–∞—Ç—å —Å–≤–æ–π {paramining}", 
							parse_mode = "HTML")

	elif message.text == "–û—Ñ–∏—Ü. —Å–∞–π—Ç":
		official_site = hlink("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", "https://pzm.space/")
		await message.answer(f"{official_site} PRIZM", 
							parse_mode = "HTML", 
							disable_web_page_preview = True)

	elif message.text == "Telegram –∫–∞–Ω–∞–ª":
		await message.answer("@prizmdev")

	elif message.text == "Paratax":
		paratax = hlink("Paratax", "https://www.prizm.network/services/real-paratax")
		await message.answer(f"–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π {paratax}", 
							parse_mode = "HTML",
							disable_web_page_preview = True)

	elif message.text == "–ë–ª–æ–∫—á–µ–π–Ω":
		blockchain =  hlink("–ë–ª–æ–∫—á–µ–π–Ω", "https://prizmexplorer.com/")
		await message.answer(f"{blockchain} PRIZM", 
							parse_mode = "HTML",
							disable_web_page_preview = True)

	elif message.text == "GitHub":
		github = hlink("GitHub", "https://github.com/prizmspace/PrizmCore")
		await message.answer(f"{github} PRIZM", 
							parse_mode = "HTML",
							disable_web_page_preview = True)

	elif message.text == "–°—Ç—Ä—É–∫—Ç—É—Ä–∞":
		structure = hlink("—Å—Ç—Ä—É–∫—Ç—É—Ä—É", "https://prizmbank.ru/blockchain/prizm-struktura.php")
		await message.answer(f"–£–∑–Ω–∞—Ç—å —Å–≤–æ—é {structure}", 
							parse_mode = "HTML",
							disable_web_page_preview = True)

	elif message.text == "BitTeam":
		bitteam = hlink("BitTeam", "https://p2p.bit.team/ru/buy/pzm")
		await message.answer(f"–ö—É–ø–∏—Ç—å PRIZM –Ω–∞ {bitteam}", 
							parse_mode = "HTML",
							disable_web_page_preview = True)

	elif message.text == "–ö—É—Ä—Å":
		importlib.reload(curs)
		importlib.reload(curs_usd)
		coinmc = hlink("CoinMarketCap", "https://coinmarketcap.com/ru/currencies/prizm/")
		await message.answer(f"–ö—É—Ä—Å PRIZM –ø–æ {coinmc}\n\nPZM/RUB: ‚ÇΩ{curs.pzm_curs}\nPZM/USD: ${curs_usd.pzm_curs}", 
							parse_mode = "HTML", 
							disable_web_page_preview = True)

	else:
		await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup = keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
time_now = datetime.today()
print(f"[{str(time_now)[:19]}]: –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

executor.start_polling(db)
